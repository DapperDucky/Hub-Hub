 if not init then
   init = true
   headertext = 'HUB HUB'
   LastInput = ""
   
   -- Obejcts 
   Mouse = nil
   Screen = nil
   Items = {}
   ItemIndexAsync = 1
   SelectedItemIndex = nil
   CurrentImage = nil
   MaxItems = 20

    -- Functions
    function Ternary(condition,x,y) if condition then return x else return y end end
    function ToVec4(a,b,c,d) return {x = a, y = b, z = c, r = d} end
    function ToColor(w,x,y,z) return {r = w, g = x, b = y, o = z} end
    
    function Split(s, delimiter)
        result = {};
        for match in (s..delimiter):gmatch("(.-)"..delimiter) do
            table.insert(result, match);
        end
        return result;
    end
    
    function DisplayText(layer, fnt, text, x, y, alignH, alignV, color)
        setNextFillColor(layer, color.r, color.g, color.b, color.o)
        setNextTextAlign(layer, alignH, alignV)
        addText(layer, fnt, text, x, y)
    end
    
    function DisplayBox(layer, x, y, w, h, fill, shadow, blur, round, stroke, strokeWidth)
        if stroke ~= nil then setNextStrokeColor(layer, stroke.r, stroke.g, stroke.b, stroke.o) end
        if strokeWidth ~= nil then setNextStrokeWidth(layer, strokeWidth) end
        if shadow ~= nil then setNextShadow(layer, blur, shadow.r, shadow.g, shadow.b, shadow.o) end
        if fill ~= nil then setNextFillColor(layer, fill.r, fill.g, fill.b, fill.o) end
        if round ~= nil then addBoxRounded(layer, x, y, w, h, round) else addBox(layer, x, y, w, h) end
    end
    
    function NewItem(i)
        t = {}
        t.Id = i[2]
        t.Quantity = i[3]
        t.Name = i[4]
        t.Icon = i[5]
        t.Description = i[6]
        t.Type = i[7]
        t.UnitMass = i[8]
        t.UnitVolume = i[9]
        t.Tier = i[10]
        return t
    end
    
    function AddItem(i) 
        table.insert(Items, 1, i)
        
        if Items[MaxItems+1] ~= nil then
           table.remove(Items, MaxItems+1)
        end
    end
    
    function GetMouse()
        local mx, my = getCursor()
        Mouse = {x = mx, y = my, Down = getCursorDown(), Release = getCursorReleased()}
    end
    
    function GetScreen()
        local s = {}
        local x, y = getResolution()
        s.Width = x
        s.Height = y
        s.HalfWidth = math.floor(x/2)
        s.HalfHeight = math.floor(y/2)
        s.ThirdWidth = math.floor(x/3)
        s.ThirdHeight = math.floor(y/3)
        s.HeaderWidth = 1050
        s.HeaderHeight = 52
        s.InfoWidth = math.floor(math.floor(x*0.38)*0.62)
        s.InfoHeight = y
        s.ContentWidth = x - math.floor(math.floor(x*0.38)*0.62)
        s.ContentHeight = y
        s.HalfContentWidth = math.floor((x - math.floor(math.floor(x*0.38)*0.62))/2)
        s.HalfContentHeight = math.floor(y/2)
        Screen = s
    end
    
    function CreateButton(i, layer, font, name, x, tx, y, mx, my, r)
        local click = false
        local btnHeight = 25
        if r and mx > x and mx < x + tx and my > y and my < y + btnHeight then click = true end
        
        if click then
           SelectedItemIndex = i
        end
        
        DisplayBox(layer, x, y, tx, btnHeight, Ternary(SelectedItemIndex == i,ToColor(0.4, 0.4, 0.4, 1),ToColor(0.2, 0.2, 0.2, 1)), Ternary(SelectedItemIndex == i,ToColor(0.8, 0.8, 0.8, 1),ToColor(0, 0, 0, 1)), 2, nil, nil, nil)
        DisplayText(layer, font, name, (x + 5), y + (btnHeight/2), AlignH_Left, AlignV_Middle, Ternary(SelectedItemIndex == i,ToColor(0.8, 0.8, 0.2, 1),ToColor(0.8, 0.8, 0.8, 1)))
        return click
    end
    
    function HandleInput()
        local inputstring = getInput()
        
        local input = nil
        if (inputstring ~= "" and LastInput ~= inputstring) then 
            input = Split(inputstring, "~")
        end
        
        if input ~= nil then
            ProcessInput(input)
        end
        
        LastInput = inputstring
    end
    
    function ProcessInput(i) if i[1] == 'I' then AddItem(NewItem(i)) end end
    
    function DisplayTextArea(layer, text, x, y, width, maxlength, font)
        local length = text:len()
        
        for i = 1, math.ceil(length/maxlength)+1, 1 do
           local startindex = (i-1)*maxlength + 1
           local endindex = i*maxlength
           local subtext = string.sub(text, startindex, Ternary(endindex <= length, endindex, length))
           DisplayText(layer, font, subtext, x, y + (20*i), AlignH_Left, AlignV_Middle, ToColor(.8, .8, .8, 1))
        end
    end
    
    -- These only need called on init
    GetScreen()
end

-- Layers
local forelayer = createLayer()
local panellayer = createLayer()
local backlayer = createLayer()
local headerfont = loadFont("RefrigeratorDeluxe", 30)
local subheaderfont = loadFont("FiraMono-Bold", 25)
local font = loadFont("FiraMono-Bold", 12)
local subfont = loadFont("FiraMono-Bold", 10)

-- Player Actions
GetMouse()
HandleInput()

for k,v in ipairs(Items) do
    local selected = CreateButton(k, panellayer, font, v.Name, 0, Screen.InfoWidth, Screen.HeaderHeight+(25*(k-1)), Mouse.x, Mouse.y, Mouse.Release)
end

-- Show Item Info
if SelectedItemIndex ~= nil then
    local i = Items[SelectedItemIndex]
    -- Header, Description, and Image
    CurrentImage = loadImage(i.Icon)
    DisplayText(forelayer, subheaderfont, i.Name, Screen.InfoWidth+10, Screen.HeaderHeight + 45, AlignH_Left, AlignV_Middle, ToColor(.8, .8, .2, 1))
    addImage(forelayer, CurrentImage, Screen.Width - 250, Screen.HeaderHeight + 25, 250, 250)
    DisplayTextArea(forelayer, i.Description, Screen.InfoWidth+10, Screen.HeaderHeight + 55, nil, 65, font)
    
    -- Quantity
    DisplayText(forelayer, subheaderfont, "Quantity", Screen.InfoWidth+72, Screen.HalfHeight - 75, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))
    DisplayText(forelayer, subheaderfont, i.Quantity, Screen.InfoWidth+72, Screen.HalfHeight - 45, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))
    
    -- Tier
    DisplayText(forelayer, subheaderfont, "Tier", Screen.HalfContentWidth+Screen.InfoWidth, Screen.HalfHeight - 75, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))
    DisplayText(forelayer, subheaderfont, i.Tier, Screen.HalfContentWidth+Screen.InfoWidth , Screen.HalfHeight - 45, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))

    -- Mass
    DisplayText(forelayer, subheaderfont, "Mass", Screen.InfoWidth+72, Screen.HalfHeight+25, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))
    DisplayText(forelayer, subheaderfont, i.UnitMass, Screen.InfoWidth+72, Screen.HalfHeight+65, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))
    
    -- Volume
    DisplayText(forelayer, subheaderfont, "Volume", Screen.HalfContentWidth+Screen.InfoWidth, Screen.HalfHeight+25, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .2, 1))
    DisplayText(forelayer, subheaderfont, i.UnitVolume, Screen.HalfContentWidth+Screen.InfoWidth , Screen.HalfHeight+65, AlignH_Center, AlignV_Middle, ToColor(.8, .8, .8, 1))
end

-- Header and Info
DisplayBox(panellayer, 0, 0, Screen.InfoWidth, Screen.InfoHeight, ToColor(1, 1, 1, .2), ToColor(0, 0, 0, 1), 15, nil, nil, nil)
DisplayBox(backlayer, 0, 0, Screen.HeaderWidth,  Screen.HeaderHeight, ToColor(1, 1, 0.2, 1), ToColor(0, 0, 0, 1), 25, nil, nil, nil)
DisplayText(backlayer, headerfont, headertext, Screen.HalfWidth, 30, AlignH_Center, AlignV_Middle, ToColor(.1, .1, .1, 1))
setBackgroundColor(.1, .1, .1)

requestAnimationFrame(2)